<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>동적 폼 전송</title>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" 
            integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
            crossorigin="anonymous"></script>
    <!-- axiosCDN 사용 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>
<body>
    <h1>AJAX,AXIOS</h1>
    <form name="register">
        <input type="text" name="id" placeholder="ID" value="bong" pattern="^[a-z0-9]{5,}$" title="소문자 숫자 5글자이상" required/>
        <input type="password" name="pw"  placeholder="pw" value="1234"/>
        <input type="text" name="name" placeholder="이름" required /> 
        <button type="button" onclick="ajaxGet()">ajaxGet전송 </button>
        <button type="button" onclick="ajaxPost()">ajaxPost전송 </button>
        <button type="button" onclick="axiosGet()">axiosGet전송 </button>
        <button type="button" onclick="axiosPost()">axiosPost전송 </button>
        <button type="button" onclick="fetchGet()">fetchGet전송 </button>
        <button type="button" onclick="fetchPost()">fetchPost전송 </button>

        <!-- 아래 두줄은 일반폼 전송할때(동기 통신) type="submit" -->
        <!-- input type = submit -->
        <!-- <button type="submit">제출</button> -->
    </form>
    <h3 id="result"></h3>

    <script>
        // 반복적으로 하니까 변수 선언해버려서 재사용
        function getData(){

            const form = document.forms["register"];

            
            if(!form.checkValidity()) { // checkValidity 폼의 유효성을 검사해서 boolean값 반환
                form.reportValidity(); // reportValidity 유효성 검사를 통과하지 못한 input에 대해 
                return;
            }

            // getData라는 함수의 반환값은 총 2가지 형태
            // false | object (객체 형태)

            const data ={
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value,
            }
        }
        // ajaxPart
        function ajaxGet(){
            const form = document.forms["register"];

            //console.log(form);
            // console.dir(form);
            // console.log(form.id);
            // console.log(form.id.value);

            const data ={
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value,
            }

            $.ajax({
                //type: "GET", //form 속성중 메서드에 해당되는것
                //url: "/ajax", //Form 속성중 action
                // data: data,
                url: `/ajax?id=${data.id}&pw=${data.pw}$name=${data.name}`,
                success: function(result){ // 응답을 성공적으로 받았을경우에 대한 이벤트 핸들러
                        // 매개변수(result)에 응답이 들어온다
                        console.log(result);
                        const {
                            name
                        } = result;
                        $("#result").html(`ajax get요청 성공 ${result.name}`); // 뒤에 요청 성공 백틱으로 바꿔라
                    }

            })
        }
        function ajaxPost(){
            const data = getData(); //공통 데이터 선언해서 이거 사용!!!!!
            if(!data) return;
            $.ajax({
                type: "POST", //form 속성중 메서드에 해당되는것
                url: "/ajax", //Form 속성중 action
                data: data,
                
                success: function(result){ // 응답을 성공적으로 받았을경우에 대한 이벤트 핸들러
                        // 매개변수(result)에 응답이 들어온다
                        console.log(result);
                        const {
                            name
                        } = result;
                        $("#result").html(`ajax Post요청 성공 ${name}님 환영합니다.`); // 뒤에 요청 성공 백틱으로 바꿔라
                    }

            })
            
        }
       
        // axiosPart
        function axiosGet(){

            const data = getData();

            //axios 함수는 promise  객체를 return
            axios({

                method: "GET",
                url: "/axios",
                params: data //get 요청으로 데이터 보낼때 params사용
                //parms 대신에 url에 query를 작성해도 된다. 위에 ajax에서 한것처럼 하면됨!!
            }).then((res) => {  
                //서버에서 보내준 응답이 res에 담긴다.
                console.log("res",res);
                console.log("res=", res.data);
                const {
                        name
                        } = result;
                $("#result").html(`axios get요청 성공 ${data.name}님 환영한다.`); // 뒤에 요청 성공 백틱으로 바꿔라


            })
        }
        async function axiosPost(){
            // 동적 폼 전송
            // 폼 유효성 검사도 하고 싶음.
            // 폼 유효성 검사를 input 태그의 pattern, minlength, required등의 속성을 이용하고 싶음
            //input 태그의 pattern, minlength, required 이 속성은 form의 submit할때만 가능하다...
            // form 의 "submit" 을 이용하는게 아니다..
            // 따라서, javascript 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야함.
            // 방법1))
            // const regex = /^[a-z0-9]{5,}$/,
            // regex.test(form.id.value);
            // 방법2))
            // form.checkValidity() 와 form.reportValidity()


            const data = getData();
            // data에 받아오는 값은 두가지 형태중 하나
            //
            if(!data) return;

            const res = await axios({
                method: "post",
                url: "/axios",
                data: data, //서버에 데이터 보낼때 data
            })
            console.log("res",res);
            console.log("res.data", res.data);
            $("#result").html(`axios Post요청 성공 ${res.data.name}님 환영합니다.`); // 뒤에 요청 성공 백틱으로 바꿔라


            //axios 함수는 promise  객체를 return
            // axios({

            //     method: "POST",
            //     url: "/axios",
            //     data: data,
            // }).then((res) => {  

            //     //서버에서 보내준 응답이 res에 담긴다.
            //     const {
            //         name
            //     } = res.data;
            //     console.log(res);
            //     console.log("res=", res.data);
            //     console.log(res.status);
            //     $("#result").html(`axios Post요청 성공 ${name}님 환영합니다.`); // 뒤에 요청 성공 백틱으로 바꿔라


            // })

        }
       
       
       async function fetchGet(){
            const data = getData();
            if(!data) return;

            // fetch(url, 옵션객체)
            // url -> action
            // option 객체에 method가 있음.
            // fetch는 method 기본값 get
            // fetch는 get 요청시 데이터를 query로 만들어서 url과 함께 전송한다.
            // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
            
            const urlQuery = URLSearchParams(data).toString();
            
            // fetch(`/fetch?${urlQuery}`).then((async(res) => {
            //     console.log("원본",res);
            //     console.log("파상", await res.json());
            //     // 응답을 파싱해야함.  ex)res.json(), res.text()
            //     //.json() .text()
                
            // })

            //--------------방법 3(async await)---------------
            const oriRes = fetch(`/fetch?${urlQuery}`)
            const parse = await oriRes.json();
            console.log(res);
            
        }
        function fetchPost(){
            const data = getData();
            if(!data) return;

            // 원래는 content-type 기본값 사용
            // 하지만 , fetch post 요청시에 기본값을 사용했을때 동작을 안함
            // content-type을 application/json형태로 변경
            fetch("/fetch", {
                method: "post",
                headers: {
                    "Content-Type": "application/json"

                },

                body: JSON.stringify(data) // 
            }).then((res) => {
                return res.json();
            }).then((res) =>{
                console.log(res);
                $("#result").html(`fetch post요청 성공 ${res.name}`); // 뒤에 요청 성공 백틱으로 바꿔라


            })

        }
    </script>
</body>
</html>